# "_internal_defaults_do_not_set" — это обходное решение для ограничений Helm.
# Пользователям НЕ следует явно указывать "._internal_defaults_do_not_set", вместо этого следует задавать поля напрямую.
# Например, вместо `--set _internal_defaults_do_not_set.foo=bar` укажите `--set foo=bar`.
_internal_defaults_do_not_set:
  # Istio ingress gateway по принципу "a-la-carte".
  # Должен быть установлен в отдельном namespace, чтобы минимизировать доступ к секретам.
  gateways:
    istio-ingressgateway:
      name: istio-ingressgateway
      # ВНИМАНИЕ: эти метки будут неявно закодированы в selectorLabels
      # Если это создаёт проблемы, рассмотрите использование чарта `gateway`
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
      ports:
      ## Вы можете добавить пользовательские порты для шлюза в значениях пользователя, но обязательно указывайте существующие порты, так как Helm заменяет всё.
      # Обратите внимание, что AWS ELB по умолчанию выполняет проверки доступности (health checks) на первом порту
      # в этом списке. Установка этого порта как порта проверки обеспечит корректную работу health check.
      # https://github.com/istio/istio/issues/12503
      - port: 15021
        targetPort: 15021
        name: status-port
        protocol: TCP
      - port: 80
        targetPort: 8080
        name: http2
        protocol: TCP
      - port: 443
        targetPort: 8443
        name: https
        protocol: TCP

      # Настройка масштабируемости
      # replicaCount: 1
      rollingMaxSurge: 100%
      rollingMaxUnavailable: 25%
      autoscaleEnabled: true
      autoscaleMin: 1
      autoscaleMax: 5

      cpu:
        targetAverageUtilization: 80
      memory: {}
        # targetAverageUtilization: 80

      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi

      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      serviceAnnotations: {}

      # Настройка сервиса istiod. Подробнее: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
      ipFamilyPolicy: ""
      ipFamilies: []

      # Для генерации внутреннего балансировщика нагрузки:
      # --set serviceAnnotations.cloud.google.com/load-balancer-type=internal
      #serviceAnnotations:
      #    cloud.google.com/load-balancer-type: "internal"

      podAnnotations: {}
      type: LoadBalancer # изменить на NodePort, ClusterIP или LoadBalancer, если требуется

      ##############
      secretVolumes:
      - name: ingressgateway-certs
        secretName: istio-ingressgateway-certs
        mountPath: /etc/istio/ingressgateway-certs
      - name: ingressgateway-ca-certs
        secretName: istio-ingressgateway-ca-certs
        mountPath: /etc/istio/ingressgateway-ca-certs

      customService: false
      externalTrafficPolicy: ""

      ingressPorts: []
      additionalContainers: []
      configVolumes: []

      serviceAccount:
        # Аннотации для service account
        annotations: {}

      ### Расширенные параметры ############
      env: {}
      nodeSelector: {}

      tolerations: []

      # Укажите правила pod anti-affinity, которые ограничивают возможность запуска пода
      # на ноде, если там уже работают другие поды с определёнными метками.
      # Доступны два типа anti-affinity:
      #    "requiredDuringSchedulingIgnoredDuringExecution" — жёсткое требование
      #    "preferredDuringSchedulingIgnoredDuringExecution" — мягкое требование
      # Укажите значения в "podAntiAffinityLabelSelector" и "podAntiAffinityTermLabelSelector".
      # Пример:
      # podAntiAffinityLabelSelector:
      # - key: security
      #   operator: In
      #   values: S1,S2
      #   topologyKey: "kubernetes.io/hostname"
      # Это правило означает, что под не будет запущен на ноде, если на ней уже работает под с меткой security=S1
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []

      # Нужно ли запускать шлюз в привилегированном контейнере
      runAsRoot: false

      # Шаблон для injection. Если не задан, injection не выполняется.
      injectionTemplate: ""

  # Метка 'revision' используется как часть имени ресурсов при установке нескольких control plane.
  revision: ""

  # Для совместимости с Helm.
  ownerName: ""

  global:
    # NodeSelector по умолчанию для всех компонентов, чтобы запускать поды на нужных нодах
    defaultNodeSelector: {}

    # Включить pod disruption budget для control plane, чтобы обеспечить плавное обновление компонентов.
    defaultPodDisruptionBudget:
      enabled: true

    # Минимальные ресурсы по умолчанию для всех компонентов, чтобы работал Horizontal Pod Autoscaler.
    defaultResources:
      requests:
        cpu: 10m
      #   memory: 128Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    # Tolerations по умолчанию для всех подов, чтобы они могли быть запущены на нодах с taint.
    defaultTolerations: []

    # Хаб по умолчанию для образов Istio
    hub: gcr.io/istio-testing

    # Тег по умолчанию для образов Istio
    tag: latest

    # Вариант образа: debug, distroless
    variant: ""

    # Политика pull'а образов. По умолчанию: Always для latest, иначе IfNotPresent.
    imagePullPolicy: ""

    # Секреты для pull'а образов для ServiceAccount (если используется приватный реестр)
    imagePullSecrets: []
    # - private-registry-key

    # Вывод логов компонентов Istio в JSON-формате (добавляет аргумент --log_as_json)
    logAsJson: false

    # Архитектура подов и приоритет:
    #   0 - Никогда не запускать
    #   1 - Наименее предпочтительно
    #   2 - Без предпочтения
    #   3 - Наиболее предпочтительно
    arch: {}

    # Глобальный уровень логирования по умолчанию для всех компонентов
    logging:
      level: "default:info"

    # Kubernetes >=v1.11.0 создаёт два PriorityClass: system-cluster-critical и system-node-critical.
    # Лучше задать priorityClassName, чтобы Istio-поды не были удалены при нехватке ресурсов.
    priorityClassName: ""

    proxy:
      image: proxyv2

      # ВНИМАНИЕ: все Helm-чарты Istio должны использовать одинаковый clusterDomain
      # Домен кластера. По умолчанию — "cluster.local".
      clusterDomain: "cluster.local"

      # Уровень логов компонентов прокси
      componentLogLevel: "misc:error"

      # Уровень логирования прокси
      # Возможные значения: trace|debug|info|warning|error|critical|off
      logLevel: warning

    ##############################################################################################
    # Ниже указаны значения, которые также встречаются в других чартах.                        #
    # Убедитесь, что они согласованы между собой во всех чартах Istio                          #
    ##############################################################################################

    # Кастомный адрес CA для получения сертификатов подами
    caAddress: ""

    # Используется для определения местоположения istiod
    istioNamespace: istio-system

    # Mesh ID — уникальный идентификатор для взаимодействующих mesh’ей
    meshID: ""

    # Использовать вручную смонтированные сертификаты и ключи для Pilot и подов
    mountMtlsCerts: false

    multiCluster:
      # Включить поддержку multi-cluster через ingressgateway при невозможности прямой связи между подами
      enabled: false
      clusterName: ""
      globalDomainSuffix: "global"
      includeEnvoyFilter: true

    # Имя сети, к которой принадлежит кластер. Используется в multicluster-конфигурации.
    network: ""

    # Настройка провайдера сертификатов для control plane: kubernetes или istiod
    pilotCertProvider: istiod

    sds:
      # JWT-токен для SDS и значение поля aud
      token:
        aud: istio-ca

    sts:
      # Порт сервиса STS (Security Token Service) для обмена токенами. 0 — отключен.
      servicePort: 0

  meshConfig:
    enablePrometheusMerge: true

    # Trust domain — корневой домен доверия
    trustDomain: "cluster.local"

    defaultConfig:
      proxyMetadata: {}
      tracing:
      #      tlsSettings:
      #        mode: DISABLE # DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
      #        clientCertificate: # пример: /etc/istio/tracer/cert-chain.pem
      #        privateKey:        # пример: /etc/istio/tracer/key.pem
      #        caCertificates:    # пример: /etc/istio/tracer/root-cert.pem
      #        sni:               # пример: tracer.somedomain
      #        subjectAltNames: []
      # - tracer.somedomain

# "_internal_defaults_do_not_set" — это обходной путь для ограничений Helm.
# Пользователям НЕ следует явно задавать "._internal_defaults_do_not_set", вместо этого следует напрямую указывать нужные поля.
# Например, вместо `--set _internal_defaults_do_not_set.foo=bar` просто используйте `--set foo=bar`.
_internal_defaults_do_not_set:
  autoscaleEnabled: true
  autoscaleMin: 1
  autoscaleMax: 5
  autoscaleBehavior: {}
  replicaCount: 1
  rollingMaxSurge: 100%
  rollingMaxUnavailable: 25%

  hub: ""
  tag: ""
  variant: ""

  # Может быть полным hub/image:tag
  image: pilot
  traceSampling: 1.0

  # Ресурсы для минимальной установки pilot
  resources:
    requests:
      cpu: 500m
      memory: 2048Mi

  # Установите `type: RuntimeDefault`, чтобы использовать профиль безопасности по умолчанию, если он доступен
  seccompProfile: {}

  # Использовать ли существующую установку CNI
  cni:
    enabled: false
    provider: default

  # Дополнительные аргументы для контейнера
  extraContainerArgs: []

  env: {}

  envVarFrom: []

  # Настройки, связанные с контроллером снятия taint
  # Этот контроллер удалит метку `cni.istio.io/not-ready` с узлов, когда pod istio-cni станет готов
  # Следует отметить, что администратор кластера сам отвечает за установку этого taint при добавлении новых узлов; контроллер его не устанавливает
  taint:
    # Управляет активацией контроллера снятия taint
    enabled: false
    # Namespace, который будет отслеживать контроллер снятия taint для pod'ов istio-cni. Необходим только если istio-cni работает в другом namespace, чем istiod
    namespace: ""

  affinity: {}

  tolerations: []

  cpu:
    targetAverageUtilization: 80
  memory: {}
    # targetAverageUtilization: 80

  # Дополнительные volumeMount'ы в контейнер istiod
  volumeMounts: []

  # Дополнительные volumes в pod istiod
  volumes: []

  # Добавить initContainers в pod istiod
  initContainers: []

  nodeSelector: {}
  podAnnotations: {}
  serviceAnnotations: {}
  serviceAccountAnnotations: {}
  sidecarInjectorWebhookAnnotations: {}

  topologySpreadConstraints: []

  # Можно использовать jwksResolverExtraRootCA, чтобы задать root-сертификат
  # в формате PEM. Он будет использоваться pilot при разрешении JWKS URI.
  jwksResolverExtraRootCA: ""

  # Настройка времени жизни соединения sidecar с pilot.
  # Помогает распределить нагрузку между экземплярами pilot за счёт ротации соединений.
  keepaliveMaxServerConnectionAge: 30m

  # Дополнительные метки для deployment istiod
  deploymentLabels: {}

  ## Настройки конфигурации mesh

  # Установить ConfigMap с meshConfig, сгенерированным из values.yaml.
  # Если false — pilot использует значения по умолчанию или явно заданные пользователем.
  configMap: true

  # Дополнительные метки на pod, например, для настройки мониторинга и логирования
  podLabels: {}

  # Настройка сервиса istiod. Подробнее: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
  ipFamilyPolicy: ""
  ipFamilies: []

  # Только для Ambient режима.
  # Укажите это значение, если вы устанавливаете ztunnel в другом namespace, отличном от `istiod`.
  # Если задано, `istiod` будет разрешать подключения от доверенных ztunnel из указанного namespace.
  # Если не указано, `istiod` предполагает, что ztunnel находится в том же namespace.
  trustedZtunnelNamespace: ""
  # Укажите это значение, если имя ztunnel отличается от значения по умолчанию.
  trustedZtunnelName: ""

  sidecarInjectorWebhook:
    # alwaysInjectSelector и neverInjectSelector позволяют явно управлять injection’ом sidecar,
    # независимо от глобальной политики.
    # Подробнее: https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/#more-control-adding-exceptions
    neverInjectSelector: []
    alwaysInjectSelector: []

    # injectedAnnotations — дополнительные аннотации, добавляемые к pod после injection.
    # Это в основном используется для поддержки PSP.
    # Пример PSP с аннотациями:
    #
    # annotations:
    #   apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    #   apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    #
    # PSP-контроллер добавляет эти аннотации к pod до injection.
    # Чтобы новые контейнеры также получили эти аннотации, их нужно указать явно:
    # injectedAnnotations:
    #   container.apparmor.security.beta.kubernetes.io/istio-init: runtime/default
    #   container.apparmor.security.beta.kubernetes.io/istio-proxy: runtime/default
    injectedAnnotations: {}

    # Включает injection во всех namespace,
    # за исключением тех, где явно указано "istio-injection:disabled"
    # Только одно окружение должно иметь эту настройку включенной.
    enableNamespacesByDefault: false

    # Изменения, происходящие после работы sidecar injector’а, по умолчанию не обрабатываются,
    # потому что injector запускается только один раз.
    # Например, если после Istio добавится другой sidecar (например, OPA), его readiness/liveness пробы не будут переписаны.
    # Установка `IfNeeded` позволит повторно запустить injector при наличии новых изменений.
    reinvocationPolicy: Never

    rewriteAppHTTPProbe: true

    # templates определяет набор пользовательских шаблонов для sidecar injection.
    # Например:
    #
    # templates:
    #   hello: |
    #     metadata:
    #       labels:
    #         hello: world
    #
    # Затем, если pod будет создан с аннотацией `inject.istio.io/templates: hello`,
    # он будет инжектирован с меткой hello=world.
    # Это предназначено для продвинутой настройки, большинство пользователей должны использовать стандартный шаблон.
    templates: {}

    # defaultTemplates определяет список шаблонов, которые будут использоваться по умолчанию для injection.
    # По умолчанию всегда доступен шаблон `sidecar`, содержащий стандартный шаблон sidecar.
    # Чтобы использовать дополнительные шаблоны, нужно определить их через параметр `templates`,
    # и затем добавить в список defaultTemplates.
    # Пример:
    #
    # templates:
    #   hello: |
    #     metadata:
    #       labels:
    #         hello: world
    #
    # defaultTemplates: ["sidecar", "hello"]
    defaultTemplates: []

  istiodRemote:
    # Если установлено в true, указывает, что этот кластер использует удалённую установку istiod,
    # и сам istiod в этом кластере устанавливаться НЕ будет — только вспомогательные ресурсы для подключения к удалённому экземпляру.
    enabled: false

    # URL для clientConfig.url в конфигурации webhook’а для sidecar injector'а.
    # Например: https://$remotePilotAddress:15017/inject
    # Не используйте адреса сервисов в текущем кластере — вместо этого используйте clientConfig.service.
    injectionURL: ""

    # Путь в clientConfig.service, передаваемый для настройки webhook’а.
    # Может быть переопределён для передачи переменных окружения, например: /inject/cluster/remote/net/network2
    injectionPath: "/inject"

    # CA-бандл, используемый для валидации подключения к webhook’у injection
    injectionCABundle: ""

  telemetry:
    enabled: true
    v2:
      # Используется в случае Null VM.
      # Также включает обмен метаданными (metadata exchange).
      enabled: true

      # Указывает, включён ли фильтр Prometheus для метрик
      prometheus:
        enabled: true

      # Настройки фильтра Stackdriver
      stackdriver:
        enabled: false

  # revision указывается как метка 'version' и как часть имён ресурсов при установке нескольких control plane'ов
  revision: ""

  # revisionTags — это псевдонимы (алиасы) для версий control plane в Istio
  revisionTags: []

  # Для совместимости с Helm
  ownerName: ""

  # meshConfig определяет поведение компонентов во время исполнения, включая istiod и istio-agent
  # Полный список доступен на: https://istio.io/docs/reference/config/istio.mesh.v1alpha1/
  meshConfig:
    enablePrometheusMerge: true

  experimental:
    # Включить экспериментальную стабильную политику валидации
    stableValidationPolicy: false

  global:
    # Используется для определения расположения istiod
    istioNamespace: istio-system

    # Список разрешённых подписантов сертификатов, которым разрешено выполнять действие "approve"
    #
    # certSigners:
    #   - clusterissuers.cert-manager.io/istio-ca
    certSigners: []

    # Включить pod disruption budget для компонентов control plane,
    # что обеспечивает безопасное обновление или восстановление Istio
    defaultPodDisruptionBudget:
      enabled: true
      # Значения (например, minAvailable) не могут быть изменены из-за ограничений в Kubernetes для PodDisruptionBudget

    # Минимальные ресурсы по умолчанию, чтобы работал Horizontal Pod Autoscaler (если настроен)
    # Каждый компонент может переопределить эти значения в своей секции.
    defaultResources:
      requests:
        cpu: 10m
      #   memory: 128Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    # Контейнерный registry по умолчанию для образов Istio
    # Релизы публикуются на docker hub в проекте 'istio'
    # Сборки из CI — на gcr.io
    hub: docker.io/istio

    # Тег по умолчанию для образов Istio
    tag: 1.26.0

    # Вариант образа, например debug или distroless
    variant: ""

    # Политика pull’а образов. По умолчанию: Always для latest, иначе IfNotPresent
    imagePullPolicy: ""

    # Секреты для pull’а образов из приватного реестра, применяемые ко всем ServiceAccount
    # Для компонентов без ServiceAccount (например, grafana, servicegraph, tracing)
    # эти секреты будут добавлены напрямую в Deployment или StatefulSet
    imagePullSecrets: []
    # - private-registry-key

    # Включено по умолчанию в master для расширенного тестирования
    istiod:
      enableAnalysis: false

    # Включает вывод логов всех компонентов Istio в формате JSON (через аргумент --log_as_json)
    logAsJson: false

    # Минимальный уровень логирования по каждому скоупу, в формате <scope>:<level>,<scope>:<level>
    # Если не указано — используются значения по умолчанию, заданные в коде
    logging:
      level: "default:info"

    # Пропустить создание ConfigMap для sidecar injector’а
    omitSidecarInjectorConfigMap: false

    # Управляет ли Istio Operator конфигурациями webhook’ов
    # Если true — Operator берёт управление на себя, если false — webhook’и управляют собой сами
    operatorManageWebhooks: false

    # Кастомная DNS-конфигурация pod'ов для разрешения имён сервисов в других кластерах
    # Используется для добавления search-доменов и других настроек
    # Подробнее: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config
    # Примечание: не применяется к gateway-подам, которым могут потребоваться иные настройки
    # NOTE: если используете шаблоны, используйте следующий шаблон:
    #podDNSSearchNamespaces:
    #- global
    #- "{{ valueOrDefault .DeploymentMeta.Namespace \"default\" }}.global"

    # Kubernetes >=v1.11.0 создаёт два PriorityClass: system-cluster-critical и system-node-critical
    # Лучше явно задать priorityClassName, чтобы гарантировать, что pod'ы Istio не будут завершены из-за низкого приоритета
    # Подробнее: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""

    proxy:
      image: proxyv2

      # Управляет политикой в sidecar injector’е.
      autoInject: enabled

      # ВНИМАНИЕ: Важно, чтобы во всех Helm-чартах Istio было задано одинаковое значение clusterDomain
      # Домен кластера. Значение по умолчанию: "cluster.local".
      clusterDomain: "cluster.local"

      # Уровень логирования для proxy по компонентам. Применяется к gateway и sidecar.
      # Если уровень не задан, используется глобальный logLevel.
      componentLogLevel: "misc:error"

      # Список разрешённых входящих портов (ingress)
      # Примеры:
      #     Перенаправлять только выбранные порты: --includeInboundPorts="80,8080"
      excludeInboundPorts: ""
      includeInboundPorts: "*"

      # Список разрешённых исходящих IP (egress)
      # Подробнее: https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly
      # Пример: includeIPRanges: "172.30.0.0/16,172.20.0.0/16"
      # Это ограничит захват трафика только на указанные подсети; остальной трафик будет пропущен
      includeIPRanges: "*"
      excludeIPRanges: ""
      includeOutboundPorts: ""
      excludeOutboundPorts: ""

      # Уровень логов для proxy (gateway и sidecar)
      # Допустимые значения: trace|debug|info|warning|error|critical|off
      logLevel: warning

      # Путь к лог-файлу событий отклонения (outlier detection)
      # Пример: /dev/stdout
      outlierLogPath: ""

      # Если true — контейнер istio-proxy будет запускаться с привилегиями (privileged)
      privileged: false

      # Количество неудачных проб до того, как под будет считаться неготовым
      readinessFailureThreshold: 4

      # Задержка перед первой readiness-пробой (в секундах)
      readinessInitialDelaySeconds: 0

      # Периодичность readiness-проб (в секундах)
      readinessPeriodSeconds: 15

      # Включает или отключает startup-пробу
      # Для быстрой и стабильной инициализации рекомендуется синхронизировать с readiness-пробами
      #
      # Рекомендуемые значения если probe включена:
      # delay=0s, period=15s, failureThreshold=4 — под будет готов сразу после прохождения стартап-пробы
      #
      # Если отключена:
      # delay=1s, period=2s, failureThreshold=30 — ускоренная инициализация, но с безопасной проверкой
      startupProbe:
        enabled: true
        failureThreshold: 600 # 10 минут

      # Ресурсы для контейнера sidecar (istio-proxy)
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 2000m
          memory: 1024Mi

      # Порт, используемый для health check'ов от Pilot. Значение 0 отключает проверку.
      statusPort: 15020

      # Трейсер, который будет использоваться. Возможные значения: zipkin, lightstep, datadog, stackdriver, none
      # Если используется stackdriver вне GCP — установите переменную окружения GOOGLE_APPLICATION_CREDENTIALS
      tracer: "none"

    proxy_init:
      # Имя образа контейнера proxy_init, который настраивает iptables
      image: proxyv2

      # Принудительно применяет правила iptables без проверки идемпотентности,
      # что может вызвать ошибки. Использовать только в крайнем случае. Будет удалено в будущих релизах.
      forceApplyIptables: false

    # Указание адреса удалённого сервиса Pilot или istiod
    remotePilotAddress: ""

    ##############################################################################################
    # Следующие параметры встречаются и в других Helm-чартах. Убедитесь, что они согласованы     #
    # между всеми используемыми чартапми Istio                                                   #
    ##############################################################################################

    # Кастомный адрес CA для получения сертификатов подами
    # CSR-клиенты, такие как Istio Agent или ingress gateway, будут использовать его как endpoint
    # Если не задан — используется адрес Istio discovery по умолчанию
    caAddress: ""

    # Включить поддержку управления удалёнными кластерами
    externalIstiod: false

    # Настроить текущий кластер как config-кластер для удалённого istiod
    configCluster: false

    # Включить webhook валидации для ресурсов Istio
    configValidation: true

    # meshID — идентификатор mesh'а. Он должен быть уникальным в пределах взаимодействующих сетей,
    # но не обязан быть глобально уникальным.
    #
    # Разные meshID должны быть, если:
    # - Метрики будут агрегироваться в одном месте
    # - Mesh-сети будут объединены (federated)
    # - Политики будут ссылаться из одной сети в другую
    #
    # Если администратор ожидает, что что-то из этого может произойти — meshID должны отличаться
    #
    # В multicluster-сети все кластеры должны иметь одинаковый meshID.
    # При присоединении нового кластера его нужно будет мигрировать на текущий meshID.
    #
    # Если значение не задано — используется trustDomain.
    # Рекомендуется всегда задавать правильный trustDomain явно.
    meshID: ""

    # Настройка mesh-сетей для Split Horizon EDS
    #
    # Пример:
    # meshNetworks:
    #   network1:
    #     endpoints:
    #     - fromCidr: "192.168.0.1/24"
    #     gateways:
    #     - address: 1.1.1.1
    #       port: 80
    #   network2:
    #     endpoints:
    #     - fromRegistry: reg1
    #     gateways:
    #     - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local
    #       port: 443
    #
    # network1: сопоставление через IP-диапазон
    # network2: сопоставление через registry, gateway определяется через сервис
    meshNetworks: {}

    # Использовать указанные пользователем ключ и сертификаты,
    # смонтированные как секретный том (secret volume) для Pilot и рабочих подов
    mountMtlsCerts: false

    multiCluster:
      # Установите значение true, чтобы соединить два кластера Kubernetes через их ingressgateway,
      # если поды в этих кластерах не могут напрямую общаться между собой.
      # Все кластеры должны использовать Istio mTLS и общую root CA, чтобы это работало.
      enabled: false

      # Укажите имя кластера, в котором выполняется установка.
      # Это необходимо для корректного назначения меток в sidecar injection.
      clusterName: ""

    # Название сети, к которой относится данный кластер.
    # Это имя должно совпадать с одним из ключей в разделе meshNetworks.
    network: ""

    # Настройка провайдера сертификатов для связи control plane.
    # Поддерживаются два варианта: "kubernetes" и "istiod".
    # На некоторых платформах API Kubernetes для подписи сертификатов может отсутствовать,
    # в этом случае по умолчанию используется istiod.
    pilotCertProvider: istiod

    sds:
      # JWT-токен для SDS и поле `aud` этого токена. См. RFC 7519, раздел 4.1.3.
      # При отправке CSR от Istio Agent в CA (например, Istiod), значение `aud`
      # проверяется, чтобы убедиться, что токен действительно предназначен для CA.
      token:
        aud: istio-ca

    sts:
      # Порт сервиса STS (Security Token Service), обрабатывающего запросы на обмен токенов.
      # Установка значения, отличного от 0, включает STS-сервер.
      servicePort: 0

    # Название CA, используемого для выдачи сертификатов рабочим подам.
    # Например, если caName=GkeWorkloadCertificate, будут использоваться сертификаты GKE workload.
    # Значение по умолчанию — пустая строка. В этом случае CA настраивается другими средствами,
    # например, через переменную окружения CA_PROVIDER.
    caName: ""

    waypoint:
      # Ресурсы для прокси waypoint
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: "2"
          memory: 1Gi

      # Если указано, affinity определяет правила размещения pod’ов waypoint
      affinity: {}

      # Ограничения по распределению pod’ов waypoint по топологии (например, по зонам)
      topologySpreadConstraints: []

      # Метки узлов (nodeSelector) для pod’ов waypoint
      nodeSelector: {}

      # Tolerations для pod’ов waypoint
      tolerations: []

  base:
    # Для использования с istioctl — отключение установки CRD istio в базовом профиле
    enableIstioConfigCRDs: true

  # Настройки Gateway
  gateways:
    # Определение securityContext для pod’а.
    # Если не задано — автоматически будет установлено минимально необходимое для привязки к портам 80 и 443.
    # В Kubernetes 1.22+ для этого достаточно настройки sysctl `net.ipv4.ip_unprivileged_port_start`.
    securityContext: {}

    # Установите `type: RuntimeDefault`, чтобы использовать профиль безопасности по умолчанию
    # для шаблонных gateway'ев, если он поддерживается в вашей среде контейнеров.
    seccompProfile: {}

  # gatewayClasses позволяет настроить поведение развертывания Gateway'ев по умолчанию
  # для каждой GatewayClass. Пример:
  #
  # gatewayClasses:
  #   istio:
  #     service:
  #       spec:
  #         type: ClusterIP
  #
  # Также настройки конкретного Gateway можно задать через поле `Gateway.spec.infrastructure.parametersRef`
  gatewayClasses: {}

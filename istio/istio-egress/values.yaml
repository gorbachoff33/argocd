defaults:
  # Отдельный (standalone) istio egress gateway.
  # Должен быть установлен в отдельном namespace, чтобы минимизировать доступ к конфигурации.
  gateways:
    istio-egressgateway:
      name: istio-egressgateway
      ports:
      - port: 80
        targetPort: 8080
        name: http2
        protocol: TCP
      - port: 443
        name: https
        targetPort: 8443
        protocol: TCP

      labels:
        app: istio-egressgateway
        istio: egressgateway

      # Настройки масштабируемости
      # replicaCount: 1
      rollingMaxSurge: 100%
      rollingMaxUnavailable: 25%
      autoscaleEnabled: true
      autoscaleMin: 1
      autoscaleMax: 5
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi
      cpu:
        targetAverageUtilization: 80
      memory: {}
        # targetAverageUtilization: 80

      serviceAnnotations: {}
      podAnnotations: {}
      type: ClusterIP # изменить на NodePort или LoadBalancer при необходимости

      # Настройка службы istiod. Подробнее: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
      ipFamilyPolicy: ""
      ipFamilies: []

      secretVolumes:
      - name: egressgateway-certs
        secretName: istio-egressgateway-certs
        mountPath: /etc/istio/egressgateway-certs
      - name: egressgateway-ca-certs
        secretName: istio-egressgateway-ca-certs
        mountPath: /etc/istio/egressgateway-ca-certs

      configVolumes: []
      additionalContainers: []

      serviceAccount:
        # Аннотации для service account
        annotations: {}

      ### Расширенные параметры ############
      # TODO: переделать в реальные параметры, env не должен быть напрямую доступен
      env: {}
        # Установите значение "external" только в том случае, если вы хотите,
        # чтобы egress gateway действовал как прозрачный SNI шлюз, маршрутизирующий
        # mTLS/TLS-трафик к внешним сервисам через service entries с разрешением DNS
        # и endpoint-ами, у которых поле network установлено в "external".
        # По умолчанию пусто, чтобы egress видел те же endpoints, что и sidecar’ы,
        # для обеспечения обратной совместимости.
        # ISTIO_META_REQUESTED_NETWORK_VIEW: ""

      nodeSelector: {}
      tolerations: []

      # Указание правил pod anti-affinity, ограничивающих запуск пода на узлах,
      # где уже работают поды с определёнными метками.
      # Доступны два типа anti-affinity:
      #    "requiredDuringSchedulingIgnoredDuringExecution" — жёсткое требование
      #    "preferredDuringSchedulingIgnoredDuringExecution" — мягкое требование
      # Пример:
      # podAntiAffinityLabelSelector:
      # - key: security
      #   operator: In
      #   values: S1,S2
      #   topologyKey: "kubernetes.io/hostname"
      # Это правило запрещает запуск пода на узле, где уже есть под с меткой security=S1
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []

      # Запускать ли шлюз в привилегированном контейнере
      runAsRoot: false

      # Шаблон injection для шлюза. Если не задан — injection не будет выполнен.
      injectionTemplate: ""

  # Метка revision используется как часть имени ресурса при установке нескольких control plane
  revision: ""

  # Для совместимости с Helm
  ownerName: ""

  global:
    # Значения по умолчанию для экспортируемых сервисов, virtual services, destination rules и т.д.
    # * — объекты доступны во всех namespace’ах
    # . — объекты доступны только в текущем namespace или если явно указаны в Sidecar.egress.host
    defaultConfigVisibilitySettings: []

    # NodeSelector по умолчанию для всех компонентов
    defaultNodeSelector: {}

    # Включить Pod Disruption Budget для control plane
    defaultPodDisruptionBudget:
      enabled: true

    # Ресурсы по умолчанию для запуска HPA
    defaultResources:
      requests:
        cpu: 10m
      #   memory: 128Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    # Tolerations по умолчанию для запуска подов на нодах с taint
    defaultTolerations: []

    # Хаб по умолчанию для образов Istio
    hub: gcr.io/istio-testing

    # Тег по умолчанию для образов
    tag: latest

    # Политика pull'а образов. По умолчанию: Always для latest, иначе IfNotPresent
    imagePullPolicy: ""

    # Секреты pull'а образов для ServiceAccount
    imagePullSecrets: []
    # - private-registry-key

    # Вывод логов компонентов Istio в JSON формате
    logAsJson: false

    # Указание архитектур и приоритетов планирования подов:
    # 0 — никогда не запускать
    # 1 — наименее предпочтительно
    # 2 — без предпочтений
    # 3 — наиболее предпочтительно
    arch: {}

    # Минимальные уровни логирования на скоуп
    logging:
      level: "default:info"

    # Kubernetes >=v1.11.0 создаёт system-cluster-critical и system-node-critical.
    # Лучше задать приоритет явно.
    # Подробнее: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""

    proxy:
      image: proxyv2

      # ВНИМАНИЕ: все чарты Istio должны использовать одинаковый clusterDomain
      clusterDomain: "cluster.local"

      # Уровень логов по компонентам
      componentLogLevel: "misc:error"

      # Включить core dump для новых sidecar’ов
      enableCoreDump: false

      # Уровень логирования прокси
      # Допустимые значения: trace|debug|info|warning|error|critical|off
      logLevel: warning

    ##############################################################################################
    # Следующие параметры встречаются в других чартах. Для корректной настройки убедитесь,       #
    # что они согласованы между всеми helm-чартами Istio                                        #
    ##############################################################################################

    # Кастомный адрес CA для получения сертификатов
    caAddress: ""

    # Namespace, где находится istiod
    istioNamespace: istio-system

    # Настройка политики валидации JWT: "third-party-jwt" или "first-party-jwt"
    jwtPolicy: "third-party-jwt"

    # Уникальный идентификатор mesh (meshID)
    meshID: ""

    # Использовать вручную смонтированные ключи и сертификаты
    mountMtlsCerts: false

    multiCluster:
      # Включить соединение между двумя кластерами через ingressgateway
      enabled: false
      # Имя кластера, где выполняется установка (нужно для sidecar injection)
      clusterName: ""

    # Название сети, к которой относится кластер
    network: ""

    # Настройка поставщика сертификатов для control plane: "kubernetes" или "istiod"
    pilotCertProvider: istiod

    sds:
      # JWT-токен и значение aud. Подробнее в RFC 7519, секция 4.1.3
      token:
        aud: istio-ca

    sts:
      # Порт STS-сервиса. Установка отличного от 0 значения активирует STS
      servicePort: 0

    # Использовать ли шаблон autoscaling/v2 для HPA. Только для внутреннего использования.
    autoscalingv2API: true

  meshConfig:
    enablePrometheusMerge: true

    # Trust domain — корень доверия системы.
    # Подробнее: https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
    trustDomain: "cluster.local"

    defaultConfig:
      proxyMetadata: {}
      tracing:
      #      tlsSettings:
      #        mode: DISABLE # DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
      #        clientCertificate: # пример: /etc/istio/tracer/cert-chain.pem
      #        privateKey:        # пример: /etc/istio/tracer/key.pem
      #        caCertificates:    # пример: /etc/istio/tracer/root-cert.pem
      #        sni:               # пример: tracer.somedomain
      #        subjectAltNames: []
      # - tracer.somedomain
